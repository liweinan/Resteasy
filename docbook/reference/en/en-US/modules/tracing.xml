<?xml version="1.0" encoding="UTF-8"?>
<!--
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                         "http://www.docbook.org/xml/4.4/docbookx.dtd">
 -->
<chapter id="Tracing_Feature">
    <title>RESTEasy Tracing Feature</title>
    <section>
        <title>Overview</title>
        <para>
            Tracing feature is a way for the users of the RESTEasy to understand what's going on internally in the
            container when a request is processed. It's different from the pure logging system or profiling feature,
            which provides more general information about the request and response.
        </para>
        <para>
            The tracing feature provides more internal states of the JAX-RS container. For example, it could be able
            to show what filters a request is going through, or how long time a request is processed and other kinds
            of information.
        </para>
        <para>
            Currently it doesn't have a standard or spec to define the tracing feature, so the tracing feature is
            tightly coupled with the concrete JAX-RS implementation itself. In this chapter, let's check the design and
            usage of the tracing feature.
        </para>
    </section>
    <section>
        <title>Tracing Info Mode</title>
        <para>The RESTEasy tracing feature supports three logging mode:
        </para>
        <itemizedlist>
            <listitem>OFF</listitem>
            <listitem>ON_DEMAND</listitem>
            <listitem>ALL</listitem>
        </itemizedlist>
        <para>
            "ALL" will enable the tracing feature. "ON_DEMAND" mode will give the control to client side: A client can
            send
            a tracing request via HTTP header and get the tracing info back from response headers. "OFF" mode will
            disable
            the tracing feature, and this is the default mode.
        </para>
    </section>
    <section>
        <title>Tracing Info Level</title>
        <para>The tracing info has three levels:
        </para>
        <itemizedlist>
            <listitem>SUMMARY</listitem>
            <listitem>TRACE</listitem>
            <listitem>VERBOSE</listitem>
        </itemizedlist>
        <para>
            The "SUMMARY" level will emit some brief tracing information. The "TRACE" level will produce more detailed
            tracing information, and the "VERBOSE" level will generate extremely detailed tracing information.
        </para>
        <para>
            The tracing feature relies on the JBoss Logging framework to produce the tracing info, so the JBoss Logging
            configuration actually controls the final output of the tracing info. So it is JBoss Logging framework
            configuration
            that controls the logging threshold of the tracing info.
        </para>
    </section>
    <section>
        <title>Basic Usages</title>
        <para>By default, the tracing feature is turned off. If you want to enable the tracing feature, you need to
            add the following dependency in your project:
            <programlisting><![CDATA[<dependency>
    <groupId>org.jboss.resteasy</groupId>
    <artifactId>resteasy-tracing-api</artifactId>
</dependency>]]></programlisting>
        </para>
        <para>
            Because the tracing feature is an optional feature, the above dependency is provided by the
            <ulink url="https://github.com/resteasy/resteasy-extensions">resteasy-extensions</ulink>
            project.
        </para>
        <para>
            After including the dependency in your project, you can set the tracing mode and tracing level via the
            context-param parameters in your web
            project’s web.xml file. Here is the example:
            <programlisting><![CDATA[<context-param>
    <param-name>resteasy.server.tracing.type</param-name>
    <param-value>ALL</param-value>
    <param-name>resteasy.server.tracing.threshold</param-name>
    <param-value>SUMMARY</param-value>
</context-param>]]></programlisting>
        </para>
        <para>
            Besides the above configuration, we also need to make sure that the underlying JBoss Logger is configured
            properly so it can output the tracing info as required. Here is an example of the "logging.properties":

            <programlisting><![CDATA[# Additional logger names to configure (root logger is always configured)
#loggers=org.foo.bar, org.foo.baz
# Root logger level
logger.level=ALL
# Declare handlers for the root logger
logger.handlers=CONSOLE, FILE
# Declare handlers for additional loggers
#logger.org.foo.bar.handlers=XXX, YYY
# Console handler configuration
handler.CONSOLE=org.jboss.logmanager.handlers.ConsoleHandler
handler.CONSOLE.properties=autoFlush
handler.CONSOLE.level=ALL
handler.CONSOLE.autoFlush=true
handler.CONSOLE.formatter=PATTERN
# File handler configuration
handler.FILE=org.jboss.logmanager.handlers.FileHandler
handler.FILE.level=ALL
handler.FILE.properties=autoFlush,fileName
handler.FILE.autoFlush=true
handler.FILE.fileName=/tmp/jboss.log
handler.FILE.formatter=PATTERN
# The log format pattern for both logs
formatter.PATTERN=org.jboss.logmanager.formatters.PatternFormatter
formatter.PATTERN.properties=pattern
formatter.PATTERN.pattern=%d{HH:mm:ss,SSS} %-5p [%c{1}] %m%n]]></programlisting>

            In above setting, we have set the logger level to "ALL", and output log file to "/tmp/jboss.log". In this
            case, we can make sure that we get all the tracing info.
        </para>
        <para>
            After enabling the tracing feature as shown above, we should get the tracing info output like following:
            <programlisting><![CDATA[16:21:40,110 INFO  [general] org.jboss.resteasy.plugins.server.servlet.Servlet3AsyncHttpRequest@721299ff START baseUri=[http://localhost:8081/] requestUri=[http://localhost:8081/type] method=[GET] authScheme=[n/a] accept=n/a accept-encoding=n/a accept-charset=n/a accept-language=n/a content-type=n/a content-length=n/a  [ ---- ms]
16:21:40,110 TRACE [general] org.jboss.resteasy.plugins.server.servlet.Servlet3AsyncHttpRequest@721299ff START_HEADERS Other request headers: Connection=[Keep-Alive] Host=[localhost:8081] User-Agent=[Apache-HttpClient/4.5.4 (Java/1.8.0_201)]  [ ---- ms]
16:21:40,114 INFO  [general] org.jboss.resteasy.plugins.server.servlet.Servlet3AsyncHttpRequest@721299ff PRE_MATCH_SUMMARY PreMatchRequest summary: 0 filters [ 0.04 ms]
16:21:40,118 DEBUG [general] org.jboss.resteasy.plugins.server.servlet.Servlet3AsyncHttpRequest@721299ff REQUEST_FILTER Filter by [io.weli.tracing.HttpMethodOverride @60353244] [ 0.02 ms]
...
16:21:40,164 INFO  [general] org.jboss.resteasy.plugins.server.servlet.Servlet3AsyncHttpRequest@721299ff RESPONSE_FILTER_SUMMARY Response summary: 1 filters [ 8.11 ms]
16:21:40,164 INFO  [general] org.jboss.resteasy.plugins.server.servlet.Servlet3AsyncHttpRequest@721299ff FINISHED Response status: 200 [ ---- ms]]]></programlisting>
            From the above tracing log output, we can many aspects on how does RESTEasy deal with request, and it
            exposes a lot of internal details on how RESTEasy container works. Above is the server side tracing info
            output. In next section let's see how do we fetch the tracing info from client side.
        </para>
    </section>
    <section>
        <title>Client Side Tracing Info</title>
        <para>
            From client side, we can send request to the server side as usual, and the if the server side is configured
            properly to produce tracing info, then the info will also be sent back to client side via response headers.
            For
            example, we can send request to the server like this:

            <programlisting><![CDATA[$ curl -i http://localhost:8081/foo]]></programlisting>

            And then we can get the tracing info from the response header like the following:

            <programlisting><![CDATA[HTTP/1.1 200 OK
X-RESTEasy-Tracing-026: org.jboss.resteasy.plugins.server.servlet.Servlet3AsyncHttpRequest@7a49a8aa MBW         [ ---- / 61.57 ms |  ---- %] [org.jboss.resteasy.plugins.providers.InputStreamProvider @1cbf0b08] is skipped
...
Date: Wed, 27 Mar 2019 09:39:50 GMT
Connection: keep-alive
X-RESTEasy-Tracing-000: org.jboss.resteasy.plugins.server.servlet.Servlet3AsyncHttpRequest@7a49a8aa START       [ ---- /  ---- ms |  ---- %] baseUri=[http://localhost:8081/] requestUri=[http://localhost:8081/type] method=[GET] authScheme=[n/a] accept=*/* accept-encoding=n/a accept-charset=n/a accept-language=n/a content-type=n/a content-length=n/a
...
X-RESTEasy-Tracing-025: org.jboss.resteasy.plugins.server.servlet.Servlet3AsyncHttpRequest@7a49a8aa MBW         [ ---- / 61.42 ms |  ---- %] [org.jboss.resteasy.plugins.providers.FileRangeWriter @35b791fa] is skipped]]></programlisting>

            From above output, we can see the tracing info is in response headers, and it's marked in sequence as in the
            form of "X-RESTEasy-Tracing-nnn".
        </para>
    </section>
    <section>
        <title>Json Formatted Response</title>
        <para>The tracing log can be returned to client side in JSON format. To use
            this feature, we need to choose a JSON provider for tracing module to
            generate JSON formatted info. There are two JSON providers you can choose from and they both support the
            JSON data marshalling. The first choice is to use the jackson2 provider:
            <programlisting><![CDATA[<dependency>
    <groupId>org.jboss.resteasy</groupId>
    <artifactId>resteasy-jackson2-provider</artifactId>
</dependency>]]></programlisting>
        </para>
        <para>
            The second choice is to use the json-binding provider:

            <programlisting><![CDATA[<dependency>
    <groupId>org.jboss.resteasy</groupId>
    <artifactId>resteasy-json-binding-provider</artifactId>
</dependency>]]></programlisting>
        </para>
        <para>
            After including either of the above module, we can send request to server to get the JSON formatted tracing
            info.
            Here is a request example:

            <programlisting><![CDATA[
$ curl -H "X-RESTEasy-Tracing-Accept-Format: JSON" -i http://localhost:8081/foo]]></programlisting>

            Please note we have added "X-RESTEasy-Tracing-Accept-Format: JSON" into request header, in this way we are
            requesting the json formatted tracing info from server, and the tracing info in response header is like the
            following:

            <programlisting>
                <![CDATA[
X-RESTEasy-Tracing-000:
[{"duration":0,"event":"START","text":"baseUri=[http://localhost:8081/]
requestUri=[http://localhost:8081/foo] method=[GET] authScheme=[n/a] accept=*/*
accept-encoding=n/a accept-charset=n/a accept-language=n/a content-type=n/a
content-length=n/a
","timestamp":46600869878437},{"duration":0,"event":"START_HEADERS","text":"Other
request headers: Accept=[*/*] Host=[localhost:8081] User-Agent=[curl/7.55.1]
X-RESTEasy-Tracing-Accept-Format=[JSON]
","timestamp":46600870751617},{"duration":18336,"event":"PRE_MATCH_SUMMARY","tex
t":"PreMatchRequest summary: 0
filters","timestamp":46600872781491},{"duration":20724,"event":"REQUEST_FILTER",
"text":"Filter by [io.weli.tracing.HttpMethodOverride
@585b0020]","timestamp":46600876716467},{"duration":19414,"event":"REQUEST_FILTE
R","text":"Filter by [org.jboss.resteasy.core.AcceptHeaderByFileSuffixFilter
@3779d352]","timestamp":46600877017341},{"duration":657192,"event":"REQUEST_FILT
ER_SUMMARY","text":"Request summary: 2 filters",
...
]]></programlisting>
        </para>
        <para>
            After reformat the above json data, we can see the response structure is like this:

            <programlisting><![CDATA[[
{
“duration”: 0,
“event”: “START”,
“text”: “baseUri=[http://localhost:8081/] requestUri=[http://localhost:8081/foo] method=[GET] authScheme=[n/a] accept=*/* accept-encoding=n/a accept-charset=n/a accept-language=n/a content-type=n/a content-length=n/a “,
“timestamp”: 46600869878437
},
{
“duration”: 0,
“event”: “START_HEADERS”,
“text”: “Other request headers: Accept=[*/*] Host=[localhost:8081] User-Agent=[curl/7.55.1] X-RESTEasy-Tracing-Accept-Format=[JSON] “,
“timestamp”: 46600870751617
},
{
“duration”: 18336,
“event”: “PRE_MATCH_SUMMARY”,
“text”: “PreMatchRequest summary: 0 filters”,
“timestamp”: 46600872781491
},
{
“duration”: 20724,
“event”: “REQUEST_FILTER”,
“text”: “Filter by [io.weli.tracing.HttpMethodOverride @585b0020]”,
“timestamp”: 46600876716467
},
...
]]]>
            </programlisting>
        </para>
    </section>
    <section>
        <title>Tracing Example</title>
        <para>
            In the "resteasy-example" project, it contains a <ulink
                url="https://github.com/resteasy/resteasy-examples/tree/master/tracing-example">RESTEasy Tracing
            Example
        </ulink> to show the usages of tracing features. Please check the example to see the usages in action.
        </para>
    </section>
</chapter>